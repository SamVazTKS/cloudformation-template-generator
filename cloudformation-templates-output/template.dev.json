{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Base Environment Configuration for basic MERN stack",
  "Parameters": {
    "ServerSSHAccessIp": {
      "Type": "String",
      "Description": "Your ip so you can access the server via SSH"
    },
    "ServerSSHKeyPair": {
      "Type": "String",
      "Description": "Your key pair so you can access the server via SSH"
    },
    "AwsRegion": {
      "Type": "String",
      "Default": "us-east-2",
      "Description": "AWS Region to use"
    },
    "AwsAccountId": {
      "Type": "String",
      "Description": "AWS Account Id where this environment is being deployed"
    },
    "GitHubOAuthToken": {
      "Type": "String",
      "NoEcho": true,
      "Description": "A GitHub Personal Access token of an account that has access to the backend and frontend repos"
    },
    "GitHubOwner": {
      "Type": "String",
      "Default": "Ksquare-University",
      "AllowedPattern": "[A-Za-z0-9-]+",
      "Description": "The name of the account that owns the repositories"
    },
    "GitHubRepoBackend": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z0-9-]+",
      "Description": "The name of the backend repository (only name, not the whole url)"
    },
    "GitHubBranchBackend": {
      "Type": "String",
      "Default": "develop",
      "AllowedPattern": "[A-Za-z0-9-/]+",
      "Description": "The branch that we will be using to build this environment"
    },
    "GitHubRepoFrontend": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z0-9-]+",
      "Description": "The name of the frontend repository (only name, not the whole url)"
    },
    "GitHubBranchFrontend": {
      "Type": "String",
      "Default": "develop",
      "AllowedPattern": "[A-Za-z0-9-/]+",
      "Description": "The branch that we will be using to build this environment"
    },
    "APIUrl": {
      "Type": "String",
      "Description": "The URL your frontend will use to communicate with your backend"
    },
    "CodedeployStartCmd": {
      "Type": "String",
      "Default": "npm run docker:dev",
      "Description": "The command used by codedeploy when starting the app in the server"
    }
  },
  "Resources": {
    "appFilesBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Public",
        "BucketName": "dev-hire-deploy-bucket",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "PUT",
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "ExposedHeaders": [],
              "MaxAge": 3000
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hire-deploy-bucket"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      },
      "DeletionPolicy": "Delete"
    },
    "appFrontendBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": "dev-hire-frontend-bucket",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-appFrontendBucket"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      },
      "DeletionPolicy": "Delete"
    },
    "appFrontendOriginAccessIdentity": {
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to access Private S3"
        }
      }
    },
    "appFrontendBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": "dev-hire-frontend-bucket",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": [
                    "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${appFrontendOriginAccessIdentity}",
                    {
                      "appFrontendOriginAccessIdentity": {
                        "Ref": "appFrontendOriginAccessIdentity"
                      }
                    }
                  ]
                }
              },
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::dev-hire-frontend-bucket/*"
            }
          ]
        }
      }
    },
    "appFrontendDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Comment": "CDN for SPA",
          "Aliases": [],
          "Enabled": true,
          "DefaultCacheBehavior": {
            "Compress": true,
            "ForwardedValues": {
              "QueryString": true
            },
            "TargetOriginId": "only-origin",
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "DefaultRootObject": "index.html",
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            },
            {
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            }
          ],
          "Origins": [
            {
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Sub": [
                    "origin-access-identity/cloudfront/${appFrontendOriginAccessIdentity}",
                    {
                      "appFrontendOriginAccessIdentity": {
                        "Ref": "appFrontendOriginAccessIdentity"
                      }
                    }
                  ]
                }
              },
              "DomainName": {
                "Fn::GetAtt": [
                  "appFrontendBucket",
                  "DomainName"
                ]
              },
              "Id": "only-origin"
            }
          ],
          "PriceClass": "PriceClass_100"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-appFrontendDistribution"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appFrontendBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/CloudFrontFullAccess"
        ]
      }
    },
    "appFrontendCodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Name": "dev-hire-frontend",
        "Description": "Builds and deploys dev-hire-frontend project",
        "ServiceRole": {
          "Fn::GetAtt": [
            "appFrontendBuildRole",
            "Arn"
          ]
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:4.0",
          "EnvironmentVariables": [
            {
              "Name": "CLOUDFRONT_DIST_ID",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "appFrontendDistribution"
              }
            },
            {
              "Name": "S3_BUCKET_NAME",
              "Type": "PLAINTEXT",
              "Value": "dev-hire-frontend-bucket"
            },
            {
              "Name": "REACT_APP_API_BASE_URL",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "APIUrl"
                    },
                    "/api/v1"
                  ]
                ]
              }
            },
            {
              "Name": "REACT_APP_BASE_URL",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "APIUrl"
                    }
                  ]
                ]
              }
            }
          ]
        },
        "Source": {
          "Type": "CODEPIPELINE"
        },
        "SourceVersion": {
          "Ref": "GitHubBranchFrontend"
        },
        "TimeoutInMinutes": 30,
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED"
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireFrontendCodeBuild"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appFrontendCodePipelineArtifactStore": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-hire-frontend-codepipeline-artifactstore",
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireFrontendCodePipelineArtifactStore"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appFrontendCodePipelineServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "codepipeline.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Effect": "Allow",
                  "Condition": {
                    "StringEqualsIfExists": {
                      "iam:PassedToService": [
                        "cloudformation.amazonaws.com",
                        "elasticbeanstalk.amazonaws.com",
                        "ec2.amazonaws.com",
                        "ecs-tasks.amazonaws.com"
                      ]
                    }
                  }
                },
                {
                  "Action": [
                    "codecommit:CancelUploadArchive",
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:GetRepository",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:UploadArchive"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplication",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codestar-connections:UseConnection"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "elasticbeanstalk:*",
                    "ec2:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "s3:*",
                    "sns:*",
                    "cloudformation:*",
                    "rds:*",
                    "sqs:*",
                    "ecs:*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:ListFunctions"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "opsworks:CreateDeployment",
                    "opsworks:DescribeApps",
                    "opsworks:DescribeCommands",
                    "opsworks:DescribeDeployments",
                    "opsworks:DescribeInstances",
                    "opsworks:DescribeStacks",
                    "opsworks:UpdateApp",
                    "opsworks:UpdateStack"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:SetStackPolicy",
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codebuild:BatchGetBuilds",
                    "codebuild:StartBuild",
                    "codebuild:BatchGetBuildBatches",
                    "codebuild:StartBuildBatch"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "devicefarm:ListProjects",
                    "devicefarm:ListDevicePools",
                    "devicefarm:GetRun",
                    "devicefarm:GetUpload",
                    "devicefarm:CreateUpload",
                    "devicefarm:ScheduleRun"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "servicecatalog:ListProvisioningArtifacts",
                    "servicecatalog:CreateProvisioningArtifact",
                    "servicecatalog:DescribeProvisioningArtifact",
                    "servicecatalog:DeleteProvisioningArtifact",
                    "servicecatalog:UpdateProduct"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:DescribeImages"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:DescribeExecution",
                    "states:DescribeStateMachine",
                    "states:StartExecution"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "appconfig:StartDeployment",
                    "appconfig:StopDeployment",
                    "appconfig:GetDeployment"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "appFrontendCodePipelineWebhook": {
      "Type": "AWS::CodePipeline::Webhook",
      "Properties": {
        "Authentication": "GITHUB_HMAC",
        "AuthenticationConfiguration": {
          "SecretToken": {
            "Ref": "GitHubOAuthToken"
          }
        },
        "Filters": [
          {
            "JsonPath": "$.ref",
            "MatchEquals": "refs/heads/{Branch}"
          }
        ],
        "TargetPipeline": {
          "Ref": "appFrontendCodePipeline"
        },
        "TargetAction": "SourceAction",
        "Name": "dev-hireFrontendCodePipelineWebhook",
        "TargetPipelineVersion": {
          "Fn::GetAtt": [
            "appFrontendCodePipeline",
            "Version"
          ]
        },
        "RegisterWithThirdParty": true
      }
    },
    "appFrontendCodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "appFrontendCodePipelineServiceRole",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "SourceAction",
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Version": "1",
                  "Provider": "GitHub"
                },
                "OutputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "Configuration": {
                  "Owner": {
                    "Ref": "GitHubOwner"
                  },
                  "Repo": {
                    "Ref": "GitHubRepoFrontend"
                  },
                  "Branch": {
                    "Ref": "GitHubBranchFrontend"
                  },
                  "OAuthToken": {
                    "Ref": "GitHubOAuthToken"
                  },
                  "PollForSourceChanges": false
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "BuildAndDeploy",
            "Actions": [
              {
                "Name": "BuildAndDeployAction",
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "appFrontendCodeBuild"
                  }
                },
                "RunOrder": 1
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "appFrontendCodePipelineArtifactStore"
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireFrontendCodePipeline"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart",
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        ]
      }
    },
    "appServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "appServerRole"
          }
        ]
      }
    },
    "appServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SSH Access",
        "GroupName": "dev-hire-serverSecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "ServerSSHAccessIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hire-serverSecurityGroup"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "server": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment1": "Prepare the system",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndConfigure": [
              "Install",
              "Configure"
            ]
          },
          "Install": {
            "packages": {
              "apt": {
                "docker.io": [],
                "docker-compose": [],
                "npm": [],
                "ufw": [],
                "git": [],
                "ruby-full": [],
                "wget": [],
                "awscli": []
              }
            },
            "files": {
              "/srv/.env": {
                "content": "",
                "mode": "000664",
                "owner": "ubuntu",
                "group": "ubuntu"
              }
            }
          },
          "Configure": {
            "commands": {
              "01_set_system_preferences": {
                "command": "\necho \"vm.max_map_count=262144\" | sudo tee -a /etc/sysctl.conf > /dev/null && \necho \"fs.file-max=65536\" | sudo tee -a /etc/sysctl.conf > /dev/null &&\nsudo sysctl -p"
              },
              "02_allow_user_docker": {
                "command": "sudo usermod -aG docker ubuntu"
              },
              "03_configure_firewall": {
                "command": "\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\nsudo ufw --force enable"
              },
              "04_setup_srv_folder": {
                "command": "\nsudo chown ubuntu:ubuntu -R /srv\nsudo chmod u=rwX,g=srX,o=rX -R /srv"
              },
              "05_install_codedeploy_agent": {
                "command": "\nwget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install\nchmod +x ./install\nsudo ./install auto > /tmp/logfile\n"
              },
              "06_add_env_variables": {
                "command": {
                  "Fn::Sub": [
                    "\necho \"export AWS_REGION=${AwsRegion}\" >> /home/ubuntu/.bashrc\necho \"export AWS_ACCOUNT_ID=${AwsAccountId}\" >> /home/ubuntu/.bashrc\necho \"export IMAGE_REPO_NAME=dev-hire-backend\" >> /home/ubuntu/.bashrc\n              ",
                    {
                      "AwsRegion": {
                        "Ref": "AwsRegion"
                      },
                      "AwsAccountId": {
                        "Ref": "AwsAccountId"
                      }
                    }
                  ]
                }
              },
              "07_add_env_variables_for_codebuild": {
                "command": {
                  "Fn::Sub": [
                    "\ntouch /home/ubuntu/.env\necho \"export AWS_REGION=${AwsRegion}\" >> /home/ubuntu/.env\necho \"export AWS_ACCOUNT_ID=${AwsAccountId}\" >> /home/ubuntu/.env\necho \"export CODEDEPLOY_START_CMD=\\\"${CodedeployStartCmd}\\\"\" >> /home/ubuntu/.env\necho \"export IMAGE_REPO_NAME=dev-hire-backend\" >> /home/ubuntu/.env\n              ",
                    {
                      "AwsRegion": {
                        "Ref": "AwsRegion"
                      },
                      "AwsAccountId": {
                        "Ref": "AwsAccountId"
                      },
                      "CodedeployStartCmd": {
                        "Ref": "CodedeployStartCmd"
                      }
                    }
                  ]
                }
              },
              "08_update_packages": {
                "command": "\nexport DEBIAN_FRONTEND=noninteractive\nexport DEBIAN_PRIORITY=critical\napt-get -y update && apt-get -y -o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\" upgrade"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-00399ec92321828f5",
        "KeyName": {
          "Ref": "ServerSSHKeyPair"
        },
        "InstanceType": "t3a.small",
        "IamInstanceProfile": {
          "Ref": "appServerInstanceProfile"
        },
        "SecurityGroupIds": [
          {
            "Ref": "appServerSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "20"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hire-server"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "apt-get update -y\n",
                "apt-get install -y python-setuptools\n",
                "mkdir -p /opt/aws/bin\n",
                "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "python2 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource server ",
                "         --configsets InstallAndConfigure ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource server ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "jumpoxEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "InstanceId": {
          "Ref": "server"
        }
      }
    },
    "appContainerRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "dev-hire-backend",
        "RepositoryPolicyText": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "appBackendBuildRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "appServerRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireBackendContainerRepository"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appBackendBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "events:*",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart",
                    "s3:GetObject"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ]
      }
    },
    "appBackendCodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Name": "dev-hire-backend",
        "Description": "Builds hire Docker image",
        "ServiceRole": {
          "Fn::GetAtt": [
            "appBackendBuildRole",
            "Arn"
          ]
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:4.0",
          "PrivilegedMode": true,
          "EnvironmentVariables": [
            {
              "Name": "IMAGE_REPO_NAME",
              "Type": "PLAINTEXT",
              "Value": "dev-hire-backend"
            },
            {
              "Name": "IMAGE_TAG",
              "Type": "PLAINTEXT",
              "Value": "latest"
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Type": "PLAINTEXT",
              "Value": {
                "Ref": "AwsAccountId"
              }
            },
            {
              "Name": "SSH_KEY",
              "Type": "PLAINTEXT"
            },
            {
              "Name": "SERVER_ADDRESS",
              "Type": "PLAINTEXT",
              "Value": {
                "Fn::GetAtt": [
                  "server",
                  "PrivateIp"
                ]
              }
            },
            {
              "Name": "GIT_BRANCH",
              "Type": "PLAINTEXT",
              "Value": "develop"
            }
          ]
        },
        "Source": {
          "Type": "CODEPIPELINE"
        },
        "SourceVersion": {
          "Ref": "GitHubBranchBackend"
        },
        "TimeoutInMinutes": 30,
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED"
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireBackendCodeBuild"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appCodeDeployApplicaton": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "dev-hire-backend",
        "ComputePlatform": "Server",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireCodeDeployApplicaton"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appCodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "codedeploy.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ]
      }
    },
    "appCodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "appCodeDeployApplicaton"
        },
        "DeploymentGroupName": "dev-hire-backend-deployment-group",
        "Ec2TagFilters": [
          {
            "Key": "Name",
            "Type": "KEY_AND_VALUE",
            "Value": "dev-hire-server"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "appCodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "appCodePipelineArtifactStore": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-hire-codepipeline-artifactstore",
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireCodePipelineArtifactStore"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    },
    "appCodePipelineServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "codepipeline.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Effect": "Allow",
                  "Condition": {
                    "StringEqualsIfExists": {
                      "iam:PassedToService": [
                        "cloudformation.amazonaws.com",
                        "elasticbeanstalk.amazonaws.com",
                        "ec2.amazonaws.com",
                        "ecs-tasks.amazonaws.com"
                      ]
                    }
                  }
                },
                {
                  "Action": [
                    "codecommit:CancelUploadArchive",
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:GetRepository",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:UploadArchive"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplication",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codestar-connections:UseConnection"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "elasticbeanstalk:*",
                    "ec2:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "s3:*",
                    "sns:*",
                    "cloudformation:*",
                    "rds:*",
                    "sqs:*",
                    "ecs:*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:ListFunctions"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "opsworks:CreateDeployment",
                    "opsworks:DescribeApps",
                    "opsworks:DescribeCommands",
                    "opsworks:DescribeDeployments",
                    "opsworks:DescribeInstances",
                    "opsworks:DescribeStacks",
                    "opsworks:UpdateApp",
                    "opsworks:UpdateStack"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:SetStackPolicy",
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codebuild:BatchGetBuilds",
                    "codebuild:StartBuild",
                    "codebuild:BatchGetBuildBatches",
                    "codebuild:StartBuildBatch"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "devicefarm:ListProjects",
                    "devicefarm:ListDevicePools",
                    "devicefarm:GetRun",
                    "devicefarm:GetUpload",
                    "devicefarm:CreateUpload",
                    "devicefarm:ScheduleRun"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "servicecatalog:ListProvisioningArtifacts",
                    "servicecatalog:CreateProvisioningArtifact",
                    "servicecatalog:DescribeProvisioningArtifact",
                    "servicecatalog:DeleteProvisioningArtifact",
                    "servicecatalog:UpdateProduct"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:DescribeImages"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:DescribeExecution",
                    "states:DescribeStateMachine",
                    "states:StartExecution"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "appconfig:StartDeployment",
                    "appconfig:StopDeployment",
                    "appconfig:GetDeployment"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "appCodePipelineWebhook": {
      "Type": "AWS::CodePipeline::Webhook",
      "Properties": {
        "Authentication": "GITHUB_HMAC",
        "AuthenticationConfiguration": {
          "SecretToken": {
            "Ref": "GitHubOAuthToken"
          }
        },
        "Filters": [
          {
            "JsonPath": "$.ref",
            "MatchEquals": "refs/heads/{Branch}"
          }
        ],
        "TargetPipeline": {
          "Ref": "appCodePipeline"
        },
        "TargetAction": "SourceAction",
        "Name": "dev-hireCodePipelineWebhook",
        "TargetPipelineVersion": {
          "Fn::GetAtt": [
            "appCodePipeline",
            "Version"
          ]
        },
        "RegisterWithThirdParty": true
      }
    },
    "appCodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "appCodePipelineServiceRole",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "SourceAction",
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Version": "1",
                  "Provider": "GitHub"
                },
                "OutputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "Configuration": {
                  "Owner": {
                    "Ref": "GitHubOwner"
                  },
                  "Repo": {
                    "Ref": "GitHubRepoBackend"
                  },
                  "Branch": {
                    "Ref": "GitHubBranchBackend"
                  },
                  "OAuthToken": {
                    "Ref": "GitHubOAuthToken"
                  },
                  "PollForSourceChanges": false
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "BuildAction",
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "appBackendCodeBuild"
                  }
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Deploy",
            "Actions": [
              {
                "Name": "DeployAction",
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeDeploy"
                },
                "Configuration": {
                  "ApplicationName": {
                    "Ref": "appCodeDeployApplicaton"
                  },
                  "DeploymentGroupName": {
                    "Ref": "appCodeDeployDeploymentGroup"
                  }
                },
                "RunOrder": 1
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "appCodePipelineArtifactStore"
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-hireCodePipeline"
          },
          {
            "Key": "Project",
            "Value": "hire"
          },
          {
            "Key": "Env",
            "Value": "dev"
          }
        ]
      }
    }
  },
  "Outputs": {}
}